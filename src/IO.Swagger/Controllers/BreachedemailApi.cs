/*
 * Swagger breached emails
 *
 * This is a sample server breachedemails server.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.Repository;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BreachedemailApiController : ControllerBase
    {
        private static HashSet<string> hs = null;
        private readonly IBreachedeMailRepository _breachedeMailRepo;

        public BreachedemailApiController()
        {
            _breachedeMailRepo = new BreachedeMailRepository();
            hs = Startup.getHS();
        }

        /*public BreachedemailApiController(IBreachedeMailRepository breachedeMailRepo)
        {
            _breachedeMailRepo = breachedeMailRepo;
        }*/


        /// <summary>
        /// Add a breached email
        /// </summary>
        /// <remarks>Add a breached email</remarks>
        /// <param name="body">Add a breached email</param>
        /// <response code="200">Created</response>
        /// <response code="400">Conflict</response>
        [HttpPost]
        [Route("/v2/breachedemails/")]
        [ValidateModelState]
        [SwaggerOperation("Add")]
        public virtual IActionResult Add([FromBody]Breachedemail breachedemail)
        { 
            if (hs.Add(breachedemail.Name))
            {
                _breachedeMailRepo.Add(breachedemail);
                return StatusCode(200);
            }
            else
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Deletes a breachedemail
        /// </summary>
        /// <remarks>Deletes a breachedemail</remarks>
        /// <param name="breachedemail">Breached email to delete</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v2/breachedemails/{breachedemail}")]
        [ValidateModelState]
        [SwaggerOperation("Delete")]
        public virtual IActionResult Delete([FromRoute][Required]string breachedemail)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            if (hs.Remove(breachedemail))
            {
                _breachedeMailRepo.Delete(breachedemail);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// Confirm ok if breached email exist
        /// </summary>
        /// <remarks>Returns OK or NotFound</remarks>
        /// <param name="breachedemail">Breachedemail to return</param>
        /// <response code="200">OK</response>
        /// <response code="400">NotFound</response>
        [HttpGet]
        [Route("/v2/breachedemails/{breachedemail}")]
        [ValidateModelState]
        [SwaggerOperation("Get")]
        public virtual IActionResult Get([FromRoute][Required]string breachedemail)
        {
            if (hs.Contains(breachedemail))
            {
                return StatusCode(200);
            }
            else
            {
                return StatusCode(404);
            }
        }
    }
}
